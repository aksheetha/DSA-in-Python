1. append(x):
   - Adds an element `x` to the end of the list.
   - Example:
     ```python
     my_list = [1, 2, 3]
     my_list.append(4)
     # my_list is now [1, 2, 3, 4]
     ```

2. extend(iterable):
   - Extends the list by appending elements from the iterable.
   - Example:
     ```python
     my_list = [1, 2, 3]
     my_list.extend([4, 5, 6])
     # my_list is now [1, 2, 3, 4, 5, 6]
     ```

3. insert(i, x):
   - Inserts an element `x` at the specified index `i`.
   - Example:
     ```python
     my_list = [1, 2, 3]
     my_list.insert(1, 5)
     # my_list is now [1, 5, 2, 3]
     ```

4. remove(x):
   - Removes the first occurrence of element `x` from the list.
   - Example:
     ```python
     my_list = [1, 2, 3, 2]
     my_list.remove(2)
     # my_list is now [1, 3, 2]
     ```

5. pop([i]):
   - Removes and returns the element at index `i`. If no index is specified, it removes and returns the last element.
   - Example:
     ```python
     my_list = [1, 2, 3]
     popped_element = my_list.pop()
     # popped_element is 3, my_list is now [1, 2]
     ```

6. index(x):
   - Returns the index of the first occurrence of element `x` in the list.
   - Example:
     ```python
     my_list = [1, 2, 3, 2]
     index = my_list.index(2)
     # index is 1
     ```

7. count(x):
   - Returns the number of occurrences of element `x` in the list.
   - Example:
     ```python
     my_list = [1, 2, 3, 2]
     count = my_list.count(2)
     # count is 2
     ```

8. sort():
   - Sorts the list in ascending order.
   - Example:
     ```python
     my_list = [3, 1, 2]
     my_list.sort()
     # my_list is now [1, 2, 3]
     ```

9. reverse():
   - Reverses the elements of the list in place.
   - Example:
     ```python
     my_list = [1, 2, 3]
     my_list.reverse()
     # my_list is now [3, 2, 1]
     ```

10. copy():
    - Returns a shallow copy of the list.
    - Example:
      ```python
      my_list = [1, 2, 3]
      new_list = my_list.copy()
      # new_list is [1, 2, 3]
      ```
